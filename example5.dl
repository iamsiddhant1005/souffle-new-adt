.type ADT1 = A = symbol | B = number
.type ADT2 = C [m:number,n:number]  
.type ADT3 = ADT1 | ADT2 
.decl a(x:ADT3)
a(@ADT3 A "a").
a(@ADT3 B 1).
a(@ADT3 C [1,2]).

.output a

/*Output-
le5.dl
Error: Union type ADT3 contains the non-primitive type ADT1 in file example5.dl at line 3
.type ADT3 = ADT1 | ADT2 
^-------------------------
Error: Union type ADT3 contains the non-primitive type ADT2 in file example5.dl at line 3
.type ADT3 = ADT1 | ADT2 
^-------------------------
Error: `ADT3` is not a sum type in file example5.dl at line 5
a(@ADT3 A "a").
--^-------------
Error: `ADT3` is not a sum type in file example5.dl at line 6
a(@ADT3 B 1).
--^-----------
Error: `ADT3` is not a sum type in file example5.dl at line 7
a(@ADT3 C [1,2]).
--^---------------
5 errors generated, evaluation aborted */


// Observation - sum types can not contain individualsum types. Should contain primitive types only. Ask about the looping of sum types