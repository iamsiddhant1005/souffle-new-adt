// Souffle - A Datalog Compiler
// Copyright (c) 2020, The Souffle Developers. All rights reserved
// Licensed under the Universal Permissive License v 1.0 as shown at:
// - https://opensource.org/licenses/UPL
// - <souffle root>/licenses/SOUFFLE-UPL.txt

// Test operations on unsigned.


.decl BinaryNegation(x: unsigned)
BinaryNegation(itou(1)) :- bnot(itou(1)) > itou(0). 

.decl LogicalNegation(x: unsigned)
LogicalNegation(itou(0)) :- itou(1) = lnot(itou(0)).
LogicalNegation(itou(1)) :- lnot(itou(0)) != itou(0).

.decl Add(x: unsigned)
Add(x + y) :- x = itou(5), y = itou(5).
Add(x + y) :- x = itou(0), y = itou(0).
Add(x + y) :- x = itou(3), y = itou(1).
Add(x + y) :- x = itou(1000), y = itou(2147483647).

.decl Sub(x: unsigned)
Sub(x - y) :- x = itou(5), y = itou(5).
Sub(x - y) :- x = itou(5), y = itou(0).
Sub(x - y) :- x = itou(3), y = itou(1).
Sub(itou(42)) :- itou(0) - itou(1) > itou(0). // overflow

.decl Mul(x: unsigned)
Mul(x * y) :- x = itou(5), y = itou(5).
Mul(x * y) :- x = itou(5), y = itou(0).
Mul(x * y) :- x = itou(3), y = itou(1).
Mul(x * y) :- x = itou(2^16), y = itou(2^15). // Shouldn't overflow.

.decl Exp(x: unsigned)
Exp(x ^ y) :- x = itou(5), y = itou(2). // 25
Exp(x ^ y) :- x = itou(5), y = itou(3). // 125
Exp(x ^ y) :- x = itou(5), y = itou(1). // 5
Exp(x ^ y) :- x = itou(2), y = itou(4). // 16

.decl Mod(x: unsigned)
Mod(x % y) :- x = itou(5), y = itou(2). // 1
Mod(x % y) :- x = itou(25), y = itou(5). // 0

.decl BitwiseAnd(x: unsigned)
BitwiseAnd(x band y) :- x = itou(1), y = itou(4). // 0
BitwiseAnd(x band y) :- x = itou(1), y = itou(1). // 1

 .decl BitwiseOr(x: unsigned)
BitwiseOr(x bor y) :- x = itou(1), y = itou(8). // 9
BitwiseOr(x bor y) :- x = itou(5), y = itou(5). // 5
BitwiseOr(x bor y) :- x = itou(0), y = itou(42). // 42

.decl BitwiseXor(x: unsigned)
BitwiseXor(x bxor y) :- x = itou(1), y = itou(4). // 5
BitwiseXor(x bxor y) :- x = itou(5), y = itou(5). // 0
BitwiseXor(x bxor y) :- x = itou(0), y = itou(42). // 42

.decl LogicalAnd(x: unsigned)
LogicalAnd(x land y) :- x = itou(1), y = itou(4). // 1
LogicalAnd(x land y) :- x = itou(1), y = itou(0). // 0

.decl LogicalOr(x: unsigned)
LogicalOr(x lor y) :- x = itou(1), y = itou(4). // 1
LogicalOr(x lor y) :- x = itou(0), y = itou(0). // 0

.decl Max(x: unsigned)
Max(x) :- x = max(itou(2), itou(3), itou(23), itou(42)). // 42

.decl Min(x: unsigned)
Min(x) :- x = min(itou(2), itou(3), itou(23), itou(42)). // 2

.output BinaryNegation, LogicalNegation, Add, Sub, Mul, Exp, Mod, BitwiseAnd, BitwiseOr, BitwiseXor, LogicalAnd, LogicalOr, Max, Min
